generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model BlockedCategories {
  Id             Int    @id @default(autoincrement())
  GuildId        BigInt
  CategoryTarget Int
  Guilds         Guilds @relation(fields: [GuildId], references: [Id], onDelete: Cascade, map: "BlockedCategories_ibfk_1")

  @@index([GuildId], map: "GuildId")
}

model BotSettings {
  Id             Int                       @unique
  Activity       String?                   @db.VarChar(255)
  ActivityType   BotSettings_ActivityType?
  CurrencyName   String                    @default("Yen") @db.VarChar(255)
  CurrencySymbol String                    @default("ðŸ’´") @db.VarChar(255)
  DailyEnabled   Boolean                   @default(false)
  DailyAmount    BigInt                    @default(250)
}

model CommandStats {
  CommandAlias String   @id @unique(map: "CommandAlias") @db.VarChar(255)
  Count        Int      @default(0)
  CreatedAt    DateTime @default(now()) @db.Timestamp(0)
}

model CurrencyTransactions {
  Id        BigInt   @id @default(autoincrement())
  Amount    BigInt
  Reason    String   @db.Text
  UserId    BigInt
  DateAdded DateTime @default(now()) @db.Timestamp(0)
}

model DadBotChannels {
  ChannelId BigInt @id
  GuildId   BigInt
  Guilds    Guilds @relation(fields: [GuildId], references: [Id], onDelete: Cascade, map: "DadBotChannels_ibfk_1")

  @@index([GuildId], map: "GuildId")
}

model ExcludedStickyRoles {
  RoleId  BigInt @id
  GuildId BigInt
  Guilds  Guilds @relation(fields: [GuildId], references: [Id], onDelete: Cascade, map: "ExcludedStickyRoles_ibfk_1")

  @@index([GuildId], map: "GuildId")
}

model DiscordUsers {
  UserId        BigInt    @id @unique(map: "UserId")
  Amount        BigInt    @default(0)
  ClaimedDaily  Boolean   @default(false)
  DailyReminder DateTime?
  CreatedAt     DateTime  @default(now()) @db.Timestamp(0)
  Todos         Todos[]
}

model EmojiReactions {
  Id            BigInt @id @default(autoincrement())
  EmojiId       BigInt
  TriggerString String @db.VarChar(255)
  GuildId       BigInt
  Guilds        Guilds @relation(fields: [GuildId], references: [Id], onDelete: Cascade, map: "EmojiReactions_ibfk_1")

  @@index([GuildId], map: "GuildId")
}

model EmojiStats {
  EmojiId BigInt @id
  Count   BigInt
  GuildId BigInt
  Guilds  Guilds @relation(fields: [GuildId], references: [Id], onDelete: Cascade, map: "EmojiStats_ibfk_1")

  @@index([GuildId], map: "GuildId")
}

model GuildUsers {
  UserId        BigInt
  UserRole      BigInt?
  GuildId       BigInt
  CreatedAt     DateTime        @default(now()) @db.Timestamp(0)
  Guilds        Guilds          @relation(fields: [GuildId], references: [Id], onDelete: Cascade, map: "GuildUsers_ibfk_1")
  LeaveRoles    LeaveRoles[]
  UserNicknames UserNicknames[]

  @@id([UserId, GuildId])
  @@index([GuildId], map: "GuildId")
}

model Guilds {
  Id                  BigInt                @id
  Prefix              String                @default(";") @db.VarChar(50)
  Anniversary         Boolean               @default(false)
  DadBot              Boolean               @default(false)
  ErrorColor          BigInt                @default(16711680)
  OkColor             BigInt                @default(65280)
  ExcludeRole         BigInt?
  WelcomeChannel      BigInt?
  ByeChannel          BigInt?
  WelcomeMessage      String?               @db.MediumText
  ByeMessage          String?               @db.MediumText
  WelcomeTimeout      Int?
  ByeTimeout          Int?
  StickyRoles         Boolean               @default(false)
  CreatedAt           DateTime              @default(now()) @db.Timestamp(0)
  BlockedCategories   BlockedCategories[]
  DadBotChannels      DadBotChannels[]
  EmojiReactions      EmojiReactions[]
  EmojiStats          EmojiStats[]
  ExcludedStickyRoles ExcludedStickyRoles[]
  GuildUsers          GuildUsers[]
}

model LeaveRoles {
  Id          BigInt     @id @default(autoincrement())
  RoleId      BigInt
  GuildUserId BigInt
  GuildId     BigInt
  GuildUsers  GuildUsers @relation(fields: [GuildUserId, GuildId], references: [UserId, GuildId], onDelete: Cascade, map: "LeaveRoles_ibfk_1")

  @@index([GuildUserId], map: "GuildUserId")
  @@index([GuildId], map: "GuildId")
  @@index([GuildUserId, GuildId], map: "LeaveRoles_ibfk_1")
}

model Todos {
  Id           BigInt       @id @default(autoincrement())
  UserId       BigInt
  String       String       @db.VarChar(255)
  DiscordUsers DiscordUsers @relation(fields: [UserId], references: [UserId], onDelete: Cascade, map: "Todos_ibfk_1")

  @@index([UserId], map: "UserId")
}

model UserNicknames {
  Id          BigInt     @id @default(autoincrement())
  Nickname    String     @db.VarChar(255)
  GuildUserId BigInt
  GuildId     BigInt
  GuildUsers  GuildUsers @relation(fields: [GuildUserId, GuildId], references: [UserId, GuildId], onDelete: Cascade, map: "UserNicknames_ibfk_1")

  @@index([GuildUserId], map: "GuildUserId")
  @@index([GuildId], map: "GuildId")
  @@index([GuildUserId, GuildId], map: "UserNicknames_ibfk_1")
}

model Migrations {
  MigrationId   String @id @unique(map: "MigrationId") @db.VarChar(255)
  VersionString String @db.VarChar(255)

  @@map("_Migrations")
}

enum BotSettings_ActivityType {
  PLAYING
  STREAMING
  LISTENING
  WATCHING
  COMPETING
}
